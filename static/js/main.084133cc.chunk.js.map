{"version":3,"sources":["Projects.js","Homepage.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Projects","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","inherits","createClass","key","value","_this2","d3","then","i","console","log","setState","react_default","a","createElement","className","map","d","reactstrap_es","href","link","name","description","Component","Homepage","apply","arguments","src","alt","About","App","HashRouter","Fragment","Link","to","Route","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.084133cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { Card, CardBody, CardTitle, CardText } from 'reactstrap';\n\nexport class Projects extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: []\n        }\n    }\n    componentDidMount() {\n        d3.csv('data/projects.csv').then((data, i) => {\n            console.log(data);\n            this.setState({\n                data: data\n            })\n        })\n    }\n    render() {\n        console.log(this.state.data)\n        return <div className=\"container\">Projects\n                         { /* Render a card for each element in your data */}\n            {this.state.data.map((d, i) => {\n                return (\n\n                    <Card key={\"project\" + i}>\n                        <CardBody>\n                            <CardTitle><a href={d.link}>{d.name}</a></CardTitle>\n                            <CardText>{d.description}</CardText>\n                        </CardBody>\n                    </Card>\n                )\n            })}\n\n        </div>\n    }\n}\n","import React, { Component } from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nexport class Homepage extends Component {\n    render() {\n        return <div><Jumbotron>Alexis Lim</Jumbotron>\n        <div>Hello, and welcome to my website. Click on through to learn more about me.</div>\n        <div>Here is a photo of the type of puppy I would like to get in the future. Of course it would have to be once I have a job, a house with a yard, and the time to take her on exhausting but fun walks. So the distant future.</div>\n        <img src=\"https://static1.fjcdn.com/comments/I+think+its+a+leonberger+puppy+_03fbff291b1cf6e41e6aec98e59b3853.jpg\" alt=\"Cute puppy\"></img></div>\n    }\n}","import React, { Component } from 'react';\nimport './About.css';\n\nexport class About extends Component {\n    render() {\n        return <div className=\"container\"><div>I am a jumbo dog lover and have a 12 year old Westie at home that I've had since she was a wee lil' pup. Her name is Sparkle and she's a lil chubby and lazy, I like to say due to her old age.</div>\n        <div>I hope to graduate UW this spring with a job and all my sanity with little stress.</div>\n        <div>I also love food. Very much so.</div>\n        <div>Just give me a good tv show or movie with some yum grub and I am set.</div>\n        <div>This is what Sparkle looked like as a puppy, this photo isn't of her but it's got the same floppy ear.\n        </div>\n        <img src=\"https://i.ytimg.com/vi/PoKLpvRPkZk/hqdefault.jpg\" alt=\"Cute Westie Puppy\"/>\n        </div>\n        \n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Projects } from \"./Projects\";\nimport { Homepage } from \"./Homepage\";\nimport { About } from \"./About\";\n\n// Import your other components here\n\nclass App extends Component {\n    render() {\n        return (<div>\n            { /*Render your Router, Links, and Routes in here */}\n            <Router>\n                <React.Fragment>\n                    <Link to=\"/\">Home</Link>\n                    <Link to=\"/about\">About</Link>\n                    <Link to=\"/projects\">Projects</Link>\n                    <Route path=\"/about\" component={About} />\n                    <Route path=\"/projects\" component={Projects} />\n                    <Route exact path=\"/\" component = {Homepage}/>\n                </React.Fragment>\n            </Router>\n            \n        </div>\n        );\n    }\n}\n\n// function About() {\n//     return <div>About me: i like pestoons</div>\n// }\n\nexport default App;\n\n// import React, { Component } from 'react';\n// import './App.css';\n// import { HashRouter as Router, Route, Link } from \"react-router-dom\";\n// import { Projects } from './Projects';\n// import { About } from './About';\n// import { Homepage } from './Homepage';\n// import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n// class App extends Component {\n//     render() {\n//         return (\n//             <Router>\n//               <div className=\"container\">\n//                 <Link to=\"/\">Home</Link>\n//                 { ' ' }\n//                 <Link to=\"/projects\">Projects</Link>\n//                 { ' ' }\n//                 <Link to=\"/about\">About</Link>\n//                 <Route exact path=\"/\" component={ Homepage } />\n//                 <Route path=\"/projects\" component={ Projects } />\n//                 <Route path=\"/about\" component={ About } />\n//               </div>\n//             </Router>\n//             );\n//     }\n// }\n\n// export default App;\n\n// import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}